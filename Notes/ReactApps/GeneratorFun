Generator-Function: A generator-function is defined like a normal function, but whenever it needs to generate a value, it does so with the yield keyword rather than return. The yield statement suspends the function’s execution and sends a value back to the caller, but retains enough state to enable the function to resume where it is left off. When resumed, the function continues execution immediately after the last yield run. 

Ex- function* gen(){
    yield 1;
    yield 2;
}

const fun = gen()

console.log(fun.next().value) //1
console.log(fun.next().value) //2
console.log(fun.next().value) // undefined

Ex- function* g4() {
    yield* [1, 2];
  };

  const g = g4()

  console.log(g.next().value) //1
  console.log(g.next().value) //2
  console.log(g.next().value) //undefined

Encountering yield and yield*
* yield: pauses the generator execution and returns the value of the expression which is being written after the yield keyword.
* yield*: it iterates over the operand and returns each value until done is true.

