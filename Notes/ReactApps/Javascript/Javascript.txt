        Var ,let and const
-------------------------------------------------------
-------------------------------------------------------


var - the scope of variable declared within it's current execution context, which
is either the enclosing function or, for variables declared outside any function,
global.


let- let allows you to declare variables that are limited in scope to the block, statement,
or expression on which it is used.


const- This declaration creates a const whose scope can be either global or local to
the block in which it is declared. Global constants do not become properties of the window
object, unlike var variables. An initializer for a constant is required; that is, you must 
specify its value in the same statement in which it's declared which can't be declared later.


  *Variables declared without var keyword inside any function becomes global variables
  automatically. Global variables can be accessed and modified anywhere in the program

------------------------------------------------------------------------------------------------------------

        DOCUMENT OBJECT MODEL
       -----------------------------------


1) The object document model is an API for HTML and XML documents.
2)With the Document Object Model, Programmers can create and build documents, navigate
their structure, and add, modify or delete elements and content.
3)The DOM is an object oriented representation of web page, which can be modified with a
scripting language such as javascript.
4)The DOM model represents a document with a logical tree.
5)According to DOM , every HTML tag is an object. Nested tags are called "children" of the 
enclosing one. All operations on the DOM start with the document object. From it access
any node.
6)The Document Object Model can be used with any programming language.

----------------------------------------------------------------------------------------------------------------

      OVERWRITING EVENT HANDLER
     ----------------------------------------

 <button id = "mybtn"> Click Me </button>
<script>
function disp1() {alert ("Button Clicked 1");}
function disp2() {alert ("Button Clicked 2");}
document.getElementById("mybtn").onclick=disp1;
document.getElementById("mybtn").onclick=disp2;
<script>


    ONLY SECOND EVENT WILL OCCUR BECAUSE IT HAS 
    OVERRIDDEN THE FIRST EVENT.



---------------------------------------------------------------------------------------------------------------


                      CALLBACK FUNCTION
                     ----------------------------


A callback function is a function passed into another function as an argument , which is then invoked
inside the outer function to complete some kind of routine or action.


  1)  function show(){
      console.log("I am show Function");
       }

     function geeky(callback){
         callback();
      }

     geeky(show);



 2)   function show(a){
       console.log("I am show Function" + a);
       }

      function geeky(callback){
        var a=101;
        callback(a);
      }
      geeky(show)

----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------
                           
                           CONSTRUCTOR
                           ------------------

Object instance are created with constructor, which are bascially special function
which prepare new instance of an object for use.

        function Mobile() {
          this.model="3310";
          this.price=function(){
                                  document.write(this.model+"price Rs. 3000");
                                      }  //3310 price Rs. 3000
              }

        var samsung= new Mobile();
        samsung.price();  //3310 price Rs. 3000
        var lg= new Mobile();
         lg.price();        //3310 price Rs. 3000

                      
                        CONSTRUCTOR WITH PARAMETER
                        ----------------------------------------
                        
       
 
        function Mobile(model_no) {
          this.model= model_no;
          this.price=function(){
                                  document.write(this.model+"price Rs. 3000<br>");
                                      }
              }

        var samsung= new Mobile('Galaxy');
        samsung.price();              // Galaxy price Rs. 3000
        var lg= new Mobile('3310');
         nokia.price();                 // 3310 price Rs. 3000

  
    In a constructor function this does not have a value. The value of this
    will become the new object when a new object is created.


-----------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------


                    WAYS OF CREATING OBJECT
                   ------------------------------------

   1) OBJECT LITERAL, ONLY ONE OBJECT CAN BE CREATED


   var fees = {};
    fees ['Rahul'] = 200;

--------------------------------------------------------------------------

   2) OBJECT LITERAL AND DECLARATION AND INITIALIZATION,
       ONLY ONE OBJECT CAN BE CREATED

    var fees = { Rahul: 200}

-----------------------------------------------------------------------------

   3) OBJECT CONSTRUCTOR, ONLY ONE OBJECT CAN BE CREATED
    
    var fees = new object ();

------------------------------------------------------------------------------

   4) FACTORY FUNCTION, MULTIPLE OBJECTS CAN BE CREATED

        function mobile () {
                         return {
                                     model : Galaxy;
                                   }
                                 }

      var samsung= new mobile( );
      var lg = new mobile( );
--------------------------------------------------------------------------------

   5) CONSTRUCTOR FUNCTION, MULTIPLE OBJECTS CAN BE CREATED

        function Mobile () {
                     this.model = 'Galaxy' ;
                     
                               }

       var samsung= new Mobile( );
       var lg = new Mobile( );

--------------------------------------------------------------------------------------

               ARGUMENTS OBJECT IN JAVASCRIPT
               -------------------------------------------

 The arguments object contains an array of the arguments used when the
  function was called . This object contains an entry for each arguments 
 passed to the function, the first entry's index starting at 0. The arguments
 object is not an array. It is simillar to an array , but does not have any arrays
 property except length. 


  function add( num1, num2 ){
                //arguments[0]= 10
                //arguments[1]= 20
              }

  add(10,20);


 --------------------------------------------------------------------------------------------------------------

  function add( num1, num2 )
              {
                document.write(arguments.length) // returns number of arguments
              }                                                    but not the number of parameters.

  add(10,20,30,40);


--------------------------------------------------------------------------------------------------------------


    * All JavaScript values, except primitives, are objects.

    * The Window Object It represents the browser's window. All global JavaScript objects, 
    functions, and variables automatically become members of the window object. Global variables are
    properties of the window object. Global functions are methods of the window object.


     * If a value is a primitive (number, string, boolean), or another object, the value is considered a 
    property. If a value is a function, it is called a 'method'. Within the scope of an object, a function 
    is referred to as a method of that object.

------------------------------------------------------------------------------------------------------------------------


                              EVENT LOOP
                            ------------------

 The Event Loop has one simple job â€” to monitor the Call Stack and the Callback Queue. If the Call Stack
  is empty, it will take the first event from the queue and will push it to the Call Stack, which effectively 
  runs it. Such an iteration is called a tick in the Event Loop.
  
  Javascript is single thread but it can always export task to web APIs which has a capability corresponding 
  multiple thread.
  Executing setTimeout actually calls out to code that is not part of JS.
  It's part of a Web API which the browser provides for us.

-------------------------------------------------------------------------------------------------------------------------------

                                CALLBACK HELL
                             -------------------------


 Callback Hell, also known as Pyramid of Doom, is an anti-pattern seen in code of programmers who are not
  wise in the ways of asynchronous programming.
 It consists of multiple nested callbacks which makes code hard to read and debug. It is understandable
  how one might unknowingly get caught in Callback Hell while dealing with asynchronous logic.
  
     

 
