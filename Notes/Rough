//This will be used for rough work

//Here we are trying to achieve componentWillUnmount using useEffect

import React, { useEffect, useState } from 'react';
import { Button, StyleSheet, Text, View } from 'react-native';

export default function App() {
  const [dispTxt1, setDispTxt1] = useState(false);

  useEffect(() => {
    console.log('use effect ran');
    return () => { console.log('Try component unmount'); }
  }, []);

  console.log('dispText1????', dispTxt1)

  return (
    <View style={styles.container}>
      {dispTxt1 && <Text>This is text one</Text>}
      <Button
        title="Press me"
        color="#f194ff"
        onPress={() => setDispTxt1(!dispTxt1)}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    flexDirection: 'column',
    alignItems: 'center',
    justifyContent: 'center',
  },
});

===============================================================================================

import React, { useState } from 'react';
import { Button, StyleSheet, Text, View } from 'react-native';
import Greet from './Child';



export default function App() {
	const [val, setVal] = useState(0)

	const funInterval =()=>{setVal(val+1); console.log('funInterval????', val)}
	const setInt =()=>{setInterval(funInterval, 1000); console.log('setInt????', val)}
	
	return (
		<View style={styles.container}>
			<Greet count={val} />
			<Button
				onPress={setInt}
				title="Learn More"
				color="#841584"
				accessibilityLabel="Learn more about this purple button"
			/>
		</View>
	);
}

const styles = StyleSheet.create({
	container: {
		flex: 1,
		flexDirection: "column",
		backgroundColor: '#0ff',
		alignItems: 'center',
		justifyContent: 'center',

	},
});

And

import React, { Component } from 'react';
import { View, Text } from 'react-native';

   const Greet=(props)=>{
    return (
      <View>
        <Text> The count is {props.count} </Text>
      </View>
    );
  }
export default Greet;

=============================================================================================================================

MULTIPLE CHECKBOX
==================

import React, { useState } from 'react';
import { StyleSheet, View, Text } from 'react-native';
import CheckBox from '@react-native-community/checkbox';


const data = [
  { id: 1, txt: 'React Native' },
  { id: 2, txt: 'Javascript' },
  { id: 3, txt: 'Laravel' },
  { id: 4, txt: 'PHP' },
  { id: 5, txt: 'jQuery' },
  { id: 6, txt: 'Boostrap' },
  { id: 7, txt: 'HTML' },
];

export default function App() {
  const [toggleCheckBox, setToggleCheckBox] = useState(false)
  return (
    <View style={styles.container}>
      {data.map((a) => (
        <View style={{ flexDirection: 'row' }}
          key={a.id}>
          <CheckBox
            disabled={false}
            value={toggleCheckBox}
            onValueChange={(newValue) => setToggleCheckBox(newValue)}
          />
          <Text style={{ marginTop: 4, fontWeight: 'bold' }}>
            {a.txt}
          </Text>
        </View>
      ))}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    flexDirection: "column",
    backgroundColor: '#0ff',
    justifyContent: 'center',
  },
});
