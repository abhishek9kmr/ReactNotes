//This will be used for rough work

//Here we are trying to achieve componentWillUnmount using useEffect

import React, { useEffect, useState } from 'react';
import { Button, StyleSheet, Text, View } from 'react-native';

export default function App() {
  const [dispTxt1, setDispTxt1] = useState(false);

  useEffect(() => {
    console.log('use effect ran');
    return () => { console.log('Try component unmount'); }
  }, []);

  console.log('dispText1????', dispTxt1)

  return (
    <View style={styles.container}>
      {dispTxt1 && <Text>This is text one</Text>}
      <Button
        title="Press me"
        color="#f194ff"
        onPress={() => setDispTxt1(!dispTxt1)}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    flexDirection: 'column',
    alignItems: 'center',
    justifyContent: 'center',
  },
});

===============================================================================================

import React, { useState } from 'react';
import { Button, StyleSheet, Text, View } from 'react-native';
import Greet from './Child';



export default function App() {
	const [val, setVal] = useState(0)

	const funInterval =()=>{setVal(val+1); console.log('funInterval????', val)}
	const setInt =()=>{setInterval(funInterval, 1000); console.log('setInt????', val)}
	
	return (
		<View style={styles.container}>
			<Greet count={val} />
			<Button
				onPress={setInt}
				title="Learn More"
				color="#841584"
				accessibilityLabel="Learn more about this purple button"
			/>
		</View>
	);
}

const styles = StyleSheet.create({
	container: {
		flex: 1,
		flexDirection: "column",
		backgroundColor: '#0ff',
		alignItems: 'center',
		justifyContent: 'center',

	},
});

And

import React, { Component } from 'react';
import { View, Text } from 'react-native';

   const Greet=(props)=>{
    return (
      <View>
        <Text> The count is {props.count} </Text>
      </View>
    );
  }
export default Greet;

=============================================================================================================================

MULTIPLE CHECKBOX
==================

import React, { useState } from 'react';
import { StyleSheet, View, Text } from 'react-native';
import CheckBox from '@react-native-community/checkbox';


const data = [
  { id: 1, txt: 'React Native' },
  { id: 2, txt: 'Javascript' },
  { id: 3, txt: 'Laravel' },
  { id: 4, txt: 'PHP' },
  { id: 5, txt: 'jQuery' },
  { id: 6, txt: 'Boostrap' },
  { id: 7, txt: 'HTML' },
];

export default function App() {
  const [toggleCheckBox, setToggleCheckBox] = useState(false)
  return (
    <View style={styles.container}>
      {data.map((a) => (
        <View style={{ flexDirection: 'row' }}
          key={a.id}>
          <CheckBox
            disabled={false}
            value={toggleCheckBox}
            onValueChange={(newValue) => setToggleCheckBox(newValue)}
          />
          <Text style={{ marginTop: 4, fontWeight: 'bold' }}>
            {a.txt}
          </Text>
        </View>
      ))}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    flexDirection: "column",
    backgroundColor: '#0ff',
    justifyContent: 'center',
  },
});

===============================================================================================================

https://stackoverflow.com/questions/67033948/handling-checkbox-in-react-native-using-map

import React, { useState } from 'react';
import { StyleSheet, View, Text } from 'react-native';
import CheckBox from '@react-native-community/checkbox';


const data = [
  { id: 1, txt: 'React Native', price: 1 },
  { id: 2, txt: 'Javascript', price: 2 },
  { id: 3, txt: 'Laravel', price: 3 },
  { id: 4, txt: 'PHP', price: 4 },
  { id: 5, txt: 'jQuery', price: 5 },
  { id: 6, txt: 'Boostrap', price: 6 },
  { id: 7, txt: 'HTML', price: 7 },
];

export default function App() {
  const [checked, setChecked] = useState({});
  return (
    <View style={styles.container}>
      {data.map((b, index) => {
        return (
          <View key={b.id} style={{ flex: 1, flexDirection: 'column', paddingLeft: 15, paddingRight: 15 }}>
            <View style={{ flexDirection: 'row-reverse', alignItems: 'center', justifyContent: 'space-between' }}>
              <CheckBox
                disabled={false}
                value={checked[b.id]}
                onValueChange={(newValue) => { setChecked({ ...checked, [b.id]: newValue }) }}
              />
              <Text>{b.txt}</Text>
            </View>
            <View style={{ flexDirection: 'row', alignItems: 'center' }}>
              <Text style={{ fontSize: 10, fontWeight: 'bold', color: 'grey' }}>
                {" USD " + b.price}
              </Text>
            </View>
          </View>
        )
      })}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    flexDirection: "column",
    backgroundColor: '#0ff',
    justifyContent: 'center',
  },
});

=================================================================================================

import React, { useEffect, useState } from 'react';

import {
  SafeAreaView,
  View,
  StyleSheet,
  Text,
  Button,
  TouchableOpacity,
} from 'react-native';

import RNBiometrics from "react-native-simple-biometrics";
import Modal from "react-native-modal";


const bioFun = async () => {
  const can = await RNBiometrics.canAuthenticate();
  console.log('biometric possible', can)
  if (can) {
    try {
      await RNBiometrics.requestBioAuth("Verify biometric", " ");
      console.log('Biometric try ran')
      setModalVisible(false)
      // stuff to do when authenticated
      // ...
    } catch (error) {
      console.log('Biometric catch ran', error)
      // stuff to do when auth failed
      // ...
    }
  }
}

const App = () => {

  const [isModalVisible, setModalVisible] = useState(true);
  const toggleModal = () => {
    setModalVisible(!isModalVisible);
  };

  useEffect(() => { bioFun() }, [])


  return (
    <SafeAreaView style={{ flex: 1 }}>
      <View style={styles.container}>
        {/* <Modal isVisible={isModalVisible}>
        <View style={{ flex: 1 }}>
          <Text>Hello!</Text>

          <Button title="Hide modal" onPress={toggleModal} />
        </View>
      </Modal> */}

        <Modal style={{ alignSelf: 'center' }}
          animationIn={'fadeIn'}
          animationOut={'fadeOut'}
          backdropTransitionOutTiming={0}
          hideModalContentWhileAnimating={true}
          isVisible={isModalVisible}
          animationInTiming={400}
        //onBackdropPress={() => onBackdropPress()}

        >
          <View style={styles.overlay}>
            <View style={{
              backgroundColor: 'white', borderRadius: 10,
              width: 240, paddingVertical: 30,
            }}>
              <Text style={{
                color: 'green', fontSize: 25, marginBottom: 10,
                textAlign: 'center'
              }}>
                Verify biometric</Text>
              <Text style={{
                textAlign: 'center', width: '65%',
                alignSelf: 'center', color: 'grey', lineHeight: 18,
                fontSize: 14,
              }}>
                You need to verify biometric or use pin to sign in.</Text>

              <View style={{

                flexDirection: 'row', justifyContent: 'space-evenly', width: '90%',
                alignSelf: 'center', marginTop: 15
              }}>

                <TouchableOpacity
                  onPress={bioFun}
                  style={{
                    width: 90, height: 40, borderRadius: 10,
                    alignItems: 'center',
                    backgroundColor: 'green', justifyContent: 'center'
                  }}>
                  <Text style={{
                    color: 'white',
                    fontSize: 14,
                  }}>OK</Text>
                </TouchableOpacity>
              </View>

            </View>
          </View>
        </Modal >
        <Text>Biometric example</Text>
        {/* <Text>Biometric possible {can}</Text> */}
      </View>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: 'white',
    padding: 10,
    alignItems: 'center',
    justifyContent: 'center',
  },
  overlay: {
    flex: 1,
    justifyContent: 'flex-end',
  },
});

export default App;

===============================================================================================================================================================

https://stackoverflow.com/questions/61677422/error-looks-like-you-have-nested-a-navigationcontainer-inside-another-normal
